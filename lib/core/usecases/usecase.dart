import 'package:fpdart/fpdart.dart';
import 'package:rick_and_morty/core/error/failure.dart';

///Как clean программисты мы любим, чтобы наш код имел предсказуемый интерфейс.
///Публичные методы и свойства классов, которые в основном выполняют одно и то
///же, должны иметь стандартизированные имена. Касаемо наших Use Case`ов, каждый
///из них должен иметь метод call, интерфейс должен быть таким же, чтобы избежать
///путаница. Поэтому, чтобы предотвратить реализацию разных имен у наших методов,
///мы можем предоставить абстрактный класс, который невозможно вывести.
///Первый тип - Type - предназначен ждя типа возврата без ошибок.
///Второй тип - Params - вызовет незначительные изменения кода в уже существующих у нас Use Case`ах
abstract class UseCase<Type, Params> {
  Future<Either<Failure, Type>> call(Params params);
}